Phase 1
----
X View form with list of pod casts
X View pod cast details
X Save pod cast details
X View episodes of pod cast
X Add pod cast
X Delete pod cast
X Update episode list from service/utility/internet
X Rules for downloads
X Keep track of list of episodes to download
X View list of pending downloads
X Implement download podcast for real
X Background downloader:
  X Fetch list of episodes to download
  X Download the first episode on the list:
    X One piece at a time
    X Keep track of the following info for the episode:
      X Bytes downloaded
  X When finished: go to the next episode on the list 
  X Download newest episodes of PodCasts automatically
X Downloader:
  X Return file info:
    X Total size in bytes
    X Bytes downloaded
  X Return number of bytes downloaded with each buffer
X Read list of episodes for real
X Update list of episodes for real
X Save location: [My music]\PodCasts\[PodCastName]\[EpisodeName].mp3
X When creating a new pod cast:
  Separate form:
  X Input the url
  X Press create button
  X PodCastNewViewModel AppService.Create(Uri url)
  X Get pod cast info from utility
    X If OK: save and show Details user control
    X If not OK: stay on same control and show error message
X Display more episode info: date, title, size
X Select episodes to download
  X EpisodeService.DownloadEpisode
X Resolve inconsistencies with fileName/path...

- Implement SqLite repository:

CREATE TABLE Episode
(
    EpisodeId,
    Date,
    Description,
    Title,
    FileName
    MediaUrl,
    PendingDownload,
    FileSizeInBytes,
    DownloadedBytes,
    RefPodCastId
)

- Store info that an episode has already been downloaded

- Split Downloader in two responsibilities:
  - 1) download stream
  - 2) local save
  - maybe via repository for file data

- Play selected episode

- Show which episode is downloading
- Select priority of episodes to download
- Cancel download

- PodCastId: int -> string
- get, private set!  constructors -> factory methods
